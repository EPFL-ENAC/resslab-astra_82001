{"author":{"id":"fc769b6e2567e9e205694ca74e3ec1fe7d12c7256b1dffb61b7deefe77484d21"},"ops":[{"type":3,"timestamp":1737538802,"nonce":"eyWw0nulyOAKWq890ZvCRJheH0M=","metadata":{"github-id":"IC_kwDONDZihM6bX6ms","github-url":"https://github.com/EPFL-ENAC/resslab-astra_82001/issues/22#issuecomment-2606737836"},"message":"Okay, thanks @PaolaCostanzaMiglietta  @Dimitrios-astra \nDo you confirm the following then ? \n```yaml\n  box:\n    'l \u003c 9': not possible\n    '9 \u003c=l\u003c= 12': use value for 12\n    '12 \u003c l \u003c= 18': use value for 18\n    'l \u003e 18': Not possible\n  twin:\n    '9 \u003c= l \u003c= 12': use value for 9\n  multi:\n    'l\u003c 10.8': not possible\n    'l\u003e= 10.8': same as 10.8 (because of different beam analysis explicitly indicated)\n  slab:\n    'l \u003c 9': not possible\n    'l == 9': use value for 9\n    '9 \u003c l \u003c= 18': use value for 18\n    'l\u003e 18': not possible\n```\n\nand the following logic for the min width and max width for each bridge type ?\n```javascript\n getMaxWidth: (state) =\u003e {\n      if (state.bridgeType === 'Box') {\n        return 18;\n      } else if (state.bridgeType === 'Twin') {\n        return 12;\n      } else if (state.bridgeType === 'Multi') {\n        return 18;\n      } else if (state.bridgeType === 'Slab') {\n        return 18;\n      }\n      return 18;\n    },\n    getMinWidth: (state) =\u003e {\n      if (state.bridgeType === 'Box') {\n        return 9;\n      } else if (state.bridgeType === 'Twin') {\n        return 9;\n      } else if (state.bridgeType === 'Multi') {\n        return 9;\n      } else if (state.bridgeType === 'Slab') {\n        return 9;\n      }\n      return 9;\n    },\n```","files":null},{"type":6,"timestamp":1737546386,"nonce":"D1QzQAJCnmzITu/rOcnWWtAaYg8=","metadata":{"github-id":"UCE_lALONDZihM6bX6mszlpvXhc"},"target":"e9d721b5dd5381ffbf9dc8a97aae2428b975067cdcbd36dee930485cd3e9df30","message":"Okay, thanks @PaolaCostanzaMiglietta  @Dimitrios-astra \nDo you confirm the following then ? \n```yaml\n  box:\n    'l \u003c 9': not possible\n    '9 \u003c=l\u003c= 12': use value for 12\n    '12 \u003c l \u003c= 18': use value for 18\n    'l \u003e 18': Not possible\n  twin:\n    '9 \u003c= l \u003c= 12': use value for 9\n  multi:\n    'l\u003c 10.8': not possible\n    'l\u003e= 10.8': same as 10.8 (because of different beam analysis explicitly indicated)\n  slab:\n    'l \u003c 9': not possible\n    'l == 9': use value for 9\n    '9 \u003c l \u003c= 18': use value for 18\n    'l\u003e 18': not possible\n```\n\nand the following logic for the min width and max width for each bridge type ?\n```javascript\n getMaxWidth: (state) =\u003e {\n      if (state.bridgeType === 'Box') {\n        return 18;\n      } else if (state.bridgeType === 'Twin') {\n        return 12;\n      } else if (state.bridgeType === 'Multi') {\n        return 18;\n      } else if (state.bridgeType === 'Slab') {\n        return 18;\n      }\n      return 18;\n    },\n    getMinWidth: (state) =\u003e {\n      if (state.bridgeType === 'Box') {\n        return 9;\n      } else if (state.bridgeType === 'Twin') {\n        return 9;\n      } else if (state.bridgeType === 'Multi') {\n        return 10.8;\n      } else if (state.bridgeType === 'Slab') {\n        return 9;\n      }\n      return 9;\n    },\n```","files":null}]}